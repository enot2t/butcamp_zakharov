# -*- coding: utf-8 -*-
"""Копия блокнота "homework_04.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uT50NpOWk4Wns2CD6Zgk5XTNMBiWhLqD

# Домашнее задание: декораторы

## Импорт библиотек, установка констант
"""

import requests
import time
import re

from random import randint

BOOK_PATH = 'https://www.gutenberg.org/files/2638/2638-0.txt'

"""## Задание 1"""

def benchmark(func):
    """
    Декоратор, выводящий время, которое заняло выполнение декорируемой функции
    """

    def wrapper(*args, **kwargs):
        start = time.perf_counter()
        result = func(*args, **kwargs)
        end = time.perf_counter()
        print (f'Время выполнения функции {func.__name__}: {end - start:.6f}')
        print()
        return result

    return wrapper

"""## Задание 2"""

def logging(func):
    """
    Декоратор, который выводит параметры с которыми была вызвана функция
    """

    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        print('Функция вызвана с параметрами:')
        print (args, kwargs)
        print()
        return result

    return wrapper

"""## Задание 3"""

def counter(func):
    """
    Декоратор, считающий и выводящий количество вызовов декорируемой функции
    """

    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        wrapper.cntr += 1
        print(f'Функция была вызвана: {wrapper.cntr} раз')
        print()
        return result


    wrapper.cntr = 0

    return wrapper

"""## Задание 4"""

def memo(func):
  """
  Декоратор, запоминающий результаты исполнения функции func, чьи аргументы args должны быть хешируемыми
  """
  cache = {}

  def fmemo(*args):
      if args in cache:
          return cache[args]
      result = func(*args)
      cache[args] = result
      return result

  fmemo.cache = cache
  return fmemo

"""## Тестирование"""

@counter
@logging
@benchmark
def word_count(word, url=BOOK_PATH):
    """
    Функция для посчета указанного слова на html-странице
    """

    # отправляем запрос в библиотеку Gutenberg и забираем текст
    raw = requests.get(url).text

    # заменяем в тексте все небуквенные символы на пробелы
    processed_book = re.sub('[\W]+' , ' ', raw).lower()

    # считаем
    cnt = len(re.findall(word.lower(), processed_book))

    return f"Cлово {word} встречается {cnt} раз"


print(word_count('whole'))
#print(word_count.cntr)

# модифицирую функцию benchmark, чтобы она считала общее время выполнениф функции
# именно для рекурсии вывод общего времени осуществляется с помощью еще одного print() в конце
def benchmark_fib(func):
    """
    Декоратор, считающий время, которое заняло выполнение декорируемой функции
    """
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        dur = round(end - start, 6)
        wrapper.at += dur
        return result

    wrapper.at =0
    return wrapper

def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

# измеряем время выполнения с помощью изначального benchmark
@benchmark
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

print(f"Число Фибоначии: {fib(5)}")

# измеряем время выполнения с помощью модифицированного benchmark
@benchmark_fib
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)


print(f"Число Фибоначии: {fib(7)}")
print("Время выполнения функции: ")
print(round((fib.at), 8))

@memo
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

# измеряем время выполнения с помощью изначального benchmark
@benchmark
@memo
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

print(f"Число Фибоначии: {fib(5)}")

# измеряем время выполнения с помощью модифицированного benchmark
@benchmark_fib
@memo
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)
print(fib(7))
print(round(fib.at, 8))